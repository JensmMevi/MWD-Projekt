/*******************Esp8266_Websocket.ino****************************************/
#include <ESP8266WiFi.h>
#include <WebSocketClient.h>
#include <MPU6050_tockn.h>
#include <Wire.h>


//MPU6050 mpu6050(Wire);

long accelX, accelY, accelZ;
float gForceX, gForceY, gForceZ;

boolean handshakeFailed=0;
String datax= "";
String datay= "";
String dataz= "";
char path[] = "/";   //identifier of this device
const char* ssid     = "AP-PI1";
const char* password = "";
char* host = "192.168.1.55";  //replace this ip address with the ip address of your Node.Js server
const int espport= 3000;
  
WebSocketClient webSocketClient;
unsigned long previousMillis = 0;
unsigned long currentMillis;
unsigned long interval=50; //interval for sending data to the websocket server in ms
// Use WiFiClient class to create TCP connections
WiFiClient client;



void setup() {
  Serial.begin(115200);
    pinMode(LED_BUILTIN, INPUT);     // Initialize the LED_BUILTIN pin as an input
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");  
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  delay(1000);
  
  Serial.begin(9600);
  Wire.begin(0,2);
  setupMPU();
  //mpu6050.begin();
  //mpu6050.calcGyroOffsets(true);

  delay(1000);
  
wsconnect();
//  wifi_set_sleep_type(LIGHT_SLEEP_T);
}
void loop() {
  if (client.connected()) {
currentMillis=millis(); 
    //webSocketClient.getData(datax);
    //webSocketClient.getData(datay);
    webSocketClient.getData(dataz);    
    if (dataz.length() > 0) {
//Serial.println(datax);
//Serial.println(datay);
Serial.println(dataz);
    //*************send log data to server in certain interval************************************
 //currentMillis=millis();   
 if (abs(currentMillis - previousMillis) >= interval) {
 previousMillis = currentMillis;

recordAccelRegisters();
printData();
delay(100);

//datax= (String) gForceX;
//datay= (String) gForceY;
dataz= (String) gForceZ;

/*mpu6050.update();
data= (String) mpu6050.getAngleX();
data= (String) mpu6050.getAngleY();
data= (String) mpu6050.getAngleZ();
Serial.println("");                             OLD
Serial.println("");
Serial.println("");
//data= (String) mpu6050.getGyroX();*/
//webSocketClient.sendData(datax);
//webSocketClient.sendData(datay);
webSocketClient.sendData(dataz);//send sensor data to websocket server
}
  }
  else{
}
delay(100); //~~~~~~~~~~~~~~~~~~~~~Refresh Time
  }
}
//*********************************************************************************************************************
//***************function definitions**********************************************************************************
void setupMPU(){
  Wire.beginTransmission(0b1101000); //This is the I2C address of the MPU (b1101000/b1101001 for AC0 low/high datasheet sec. 9.2)
  Wire.write(0x6B); //Accessing the register 6B - Power Management (Sec. 4.28)
  Wire.write(0b00000000); //Setting SLEEP register to 0. (Required; see Note on p. 9)
  Wire.endTransmission();
  Wire.beginTransmission(0b1101000); //I2C address of the MPU
  Wire.write(0x1C); //Accessing the register 1C - Acccelerometer Configuration (Sec. 4.5) 
  Wire.write(0b00000000); //Setting the accel to +/- 2g
  Wire.endTransmission(); 
}

void recordAccelRegisters() {
  Wire.beginTransmission(0b1101000); //I2C address of the MPU
  Wire.write(0x3B); //Starting register for Accel Readings
  Wire.endTransmission();
  Wire.requestFrom(0b1101000,6); //Request Accel Registers (3B - 40)
  while(Wire.available() < 6);
  accelX = Wire.read()<<8|Wire.read(); //Store first two bytes into accelX
  accelY = Wire.read()<<8|Wire.read(); //Store middle two bytes into accelY
  accelZ = Wire.read()<<8|Wire.read(); //Store last two bytes into accelZ
  processAccelData();
}

void processAccelData(){
  gForceX = accelX / 16384.0;
  gForceY = accelY / 16384.0; 
  gForceZ = accelZ / 16384.0;
}

void printData() {
  Serial.print(" Accel (g)");
  Serial.print(" X=");
  Serial.print(gForceX);
  Serial.print(" Y=");
  Serial.print(gForceY);
  Serial.print(" Z=");
  Serial.println(gForceZ);
}

void wsconnect(){
  // Connect to the websocket server
  if (client.connect(host, espport)) {
    Serial.println("Connected");
  } else {
    Serial.println("Connection failed.");
      delay(1000);  
   
   if(handshakeFailed){
    handshakeFailed=0;
    ESP.restart();
    }
    handshakeFailed=1;
  }
  // Handshake with the server
  webSocketClient.path = path;
  webSocketClient.host = host;
  if (webSocketClient.handshake(client)) {
    Serial.println("Handshake successful");
  } else {
    
    Serial.println("Handshake failed.");
   delay(2000);  
   
   if(handshakeFailed){
    handshakeFailed=0;
    ESP.restart();
    }
    handshakeFailed=1;
  }
}